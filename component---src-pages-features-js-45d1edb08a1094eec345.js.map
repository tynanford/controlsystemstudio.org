{"version":3,"sources":["webpack:///./src/pages/features.js"],"names":["About","images","useStaticQuery","React","createElement","Layout","SEO","title","Banner","imageFluid","banner","childImageSharp","fluid","text","Container","style","marginTop","Img","opi","maxWidth","margin","marginBottom","databrowser","beast","href"],"mappings":"8FAAA,iHAuQeA,UA9PDA,KACZ,MAAMC,EAASC,yBAAe,cAqC9B,OACEC,IAAAC,cAACC,IAAM,KACLF,IAAAC,cAACE,IAAG,CAACC,MAAM,aACXJ,IAAAC,cAACI,IAAM,CACLC,WAAYR,EAAOS,OAAOC,gBAAgBC,MAC1CC,KAAK,aAEPV,IAAAC,cAACU,IAAS,CAACC,MAAO,CAAEC,UAAU,SAC5Bb,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,SAAG,6PAMHD,IAAAC,cAAA,SAAG,gIAEsD,IACvDD,IAAAC,cAAA,YAAM,OAAU,yDAElBD,IAAAC,cAAA,SAAG,yBACHD,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,sNAMJD,IAAAC,cAAA,UAAI,0DACsD,IACxDD,IAAAC,cAAA,YAAM,WAAc,2BACID,IAAAC,cAAA,YAAM,OAAU,4DACZD,IAAAC,cAAA,YAAM,mBAAsB,2LAK1DD,IAAAC,cAAA,UAAI,4LAKJD,IAAAC,cAAA,UAAI,gHAIJD,IAAAC,cAAA,UAAI,6RAQND,IAAAC,cAAA,SAAG,qEACHD,IAAAC,cAAA,WACED,IAAAC,cAAA,kGASFD,IAAAC,cAAA,SAAG,8PAMHD,IAAAC,cAAA,SAAG,iNAKHD,IAAAC,cAACa,IAAG,CACFL,MAAOX,EAAOiB,IAAIP,gBAAgBC,MAClCG,MAAO,CAAEI,SAAS,MAAQC,OAAO,iBAGnCjB,IAAAC,cAAA,OAAKW,MAAO,CAAEM,aAAa,UAC3BlB,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAAA,SAAG,0HAIHD,IAAAC,cAACa,IAAG,CACFL,MAAOX,EAAOqB,YAAYX,gBAAgBC,MAC1CG,MAAO,CAAEI,SAAU,OAErBhB,IAAAC,cAAA,SAAG,sEAKHD,IAAAC,cAAA,OAAKW,MAAO,CAAEM,aAAa,UAC3BlB,IAAAC,cAAA,UAAI,mBACJD,IAAAC,cAAA,SAAG,oNAMHD,IAAAC,cAAA,SAAG,kOAOHD,IAAAC,cAAA,OAAKW,MAAO,CAAEM,aAAa,UAC3BlB,IAAAC,cAAA,UAAI,8CACJD,IAAAC,cAAA,SAAG,4EAIHD,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,yFAIJD,IAAAC,cAAA,UAAI,iFAIJD,IAAAC,cAAA,UAAI,qDACJD,IAAAC,cAAA,UAAI,mGAKND,IAAAC,cAAA,SAAG,0CACHD,IAAAC,cAAA,UACED,IAAAC,cAAA,UAAI,qDACJD,IAAAC,cAAA,UAAI,4FAIJD,IAAAC,cAAA,UAAI,kDAEND,IAAAC,cAACa,IAAG,CACFL,MAAOX,EAAOsB,MAAMZ,gBAAgBC,MACpCG,MAAO,CAAEI,SAAU,OAErBhB,IAAAC,cAAA,SAAG,uCACoC,IACrCD,IAAAC,cAAA,KAAGoB,KAAK,kEAAiE,mEAI3ErB,IAAAC,cAAA,SACED,IAAAC,cAAA,KAAGoB,KAAK,+DAA8D,cAIxErB,IAAAC,cAAA,OAAKW,MAAO,CAAEM,aAAa,UAC3BlB,IAAAC,cAAA,UAAI,uBACJD,IAAAC,cAAA,SAAG,wKAKHD,IAAAC,cAAA,SAAG,iNAKHD,IAAAC,cAAA,SAAG,obASHD,IAAAC,cAAA,SAAG,oVAOHD,IAAAC,cAAA,SAAG,gMAKHD,IAAAC,cAAA,SACED,IAAAC,cAAA,KAAGoB,KAAK,6DAA4D,cAItErB,IAAAC,cAAA,OAAKW,MAAO,CAAEM,aAAa,UAC3BlB,IAAAC,cAAA,UAAI,eACJD,IAAAC,cAAA,SAAG,giBAUHD,IAAAC,cAAA,SACED,IAAAC,cAAA,KAAGoB,KAAK,sKAAqK","file":"component---src-pages-features-js-45d1edb08a1094eec345.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Container from \"../components/container\"\nimport Banner from \"../components/banner\"\n\nconst About = () => {\n  const images = useStaticQuery(graphql`\n    query {\n      banner: file(\n        relativePath: { eq: \"banners/CS-Studio-Keyvisual_banner_4_darker.png\" }\n      ) {\n        childImageSharp {\n          fluid(maxWidth: 3300, maxHeight: 400, quality: 100) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n      opi: file(\n        relativePath: { eq: \"CS-Studio-OPIs_and_Keyvisual_v03_big.png\" }\n      ) {\n        childImageSharp {\n          fluid(maxWidth: 3840, maxHeight: 2160) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n      beast: file(relativePath: { eq: \"beast.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 487) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n      databrowser: file(relativePath: { eq: \"databrowserabout.png\" }) {\n        childImageSharp {\n          fluid(maxWidth: 487) {\n            ...GatsbyImageSharpFluid_withWebp\n          }\n        }\n      }\n    }\n  `)\n\n  return (\n    <Layout>\n      <SEO title=\"Features\" />\n      <Banner\n        imageFluid={images.banner.childImageSharp.fluid}\n        text=\"Features\"\n      />\n      <Container style={{ marginTop: `2rem` }}>\n        <h2>Display Builder</h2>\n        <p>\n          The Display Builder is an operator interface panel builder for\n          CS-Studio. Driven by changes in computer graphics technology and\n          trends, EPICS operator interface tools tend to undergo fundamental\n          transformations every 10 years, recently accelerating.\n        </p>\n        <p>\n          The Display Builder aims to minimize these transitions. It is in large\n          parts backwards compatible with the original CS-Studio{\" \"}\n          <code>BOY</code> tool. There are translation tools from EDM and MEDM.\n        </p>\n        <p>Key features include:</p>\n        <ul>\n          <li>\n            Heavy use of threading. Display files are loaded in background\n            threads, related displays are loaded in parallel, plot images are\n            prepared in separate threads, scripts are executed off the user\n            interface thread.\n          </li>\n          <li>\n            Large number of single-purpose widgets. For example, an{\" \"}\n            <code>Ellipse</code>\n            for static graphics, an <code>LED</code> that changes between on/off\n            states based on a PV, and a <code>Multi State LED</code> that\n            changes between more than two PV states. Widgets with specific\n            purposes are more obvious not only to the end user but also to tools\n            which translate between display file formats.\n          </li>\n          <li>\n            The PV layer supports EPICS Channel Access, PV Access, local PVs,\n            simulated PVs, but also other protocols like MQTT. The data flow is\n            controlled using the Reactive Extensions for Java.\n          </li>\n          <li>\n            Model, Representation, Runtime and Editor are strictly separate\n            modules, allowing each to evolve separately.\n          </li>\n          <li>\n            The Representation is based on JavaFX, the most modern Java GUI\n            library, but as mentioned the representation is fundamentally\n            separate from the model and runtime. In principle, we could replace\n            the graphics library, and a proof-of-concept had indeed been\n            implemented based on SWT.\n          </li>\n        </ul>\n        <p>The Display Builder file format is \"compact XML\" similar to this:</p>\n        <pre>\n          <code>\n            {`<widget type=\"label\">\n  <x>100</x>\n  <y>200</y>\n  <text>Hello</text>\n<widget>`}\n          </code>\n        </pre>\n\n        <p>\n          Such an XML format can be read and written by many tools, simplifying\n          the programmatic generation of displays. The minimal nature without\n          any direct references to the display builder will simplify future\n          moves to the next greatest EPICS display tool.\n        </p>\n        <p>\n          The Display Builder is available for both the original Eclipse-based\n          CS-Studio and the current Phoebus-based development. In addition, a\n          purely web based runtime is available for remotely viewing displays.\n        </p>\n        <Img\n          fluid={images.opi.childImageSharp.fluid}\n          style={{ maxWidth: `80%`, margin: `3rem 0 4rem` }}\n        />\n\n        <div style={{ marginBottom: `3rem` }}></div>\n        <h2>DataBrowser</h2>\n        <p>\n          The Data Browser is a CSS tool for displaying live as well as\n          Archived control system data in a Strip-Chart type plot.\n        </p>\n        <Img\n          fluid={images.databrowser.childImageSharp.fluid}\n          style={{ maxWidth: 437 }}\n        />\n        <p>\n          The current plot can be emailed or sent to a log book or as email.\n        </p>\n\n        {/** Logbook **/}\n        <div style={{ marginBottom: `3rem` }}></div>\n        <h2>Logbook Support</h2>\n        <p>\n          The Data Browser, Display Builder, and other tools can be integrated with \n          the logbook clients to make rich log entries. Each application can configure the\n          data that is automatically included in the log entry.\n        </p>\n\n        <p>\n          The pluggable framework for CS-Studio and Phoebus allows applications to \n          create log entires to different implementations of logbook services. Currently, \n          there is support for Olog, Olog-ES, ELOG, and SNS operations logbook.\n        </p>\n\n        {/** Alarm Services **/}\n        <div style={{ marginBottom: `3rem` }}></div>\n        <h2>BEAST - The Best Ever Alarm System Toolkit</h2>\n        <p>\n          This is the distributed alarm system developed at the SNS, consisting\n          of\n        </p>\n        <ul>\n          <li>\n            Alarm Server that uses channel access to monitor alarm triggers in\n            the control system\n          </li>\n          <li>\n            CSS user interface for viewing current alarms as a table or\n            hierarchical tree\n          </li>\n          <li>Relational Database for configuration and logging</li>\n          <li>\n            Web reports to analyze the number and frequency of alarms, search\n            the alarm configuration etc.\n          </li>\n        </ul>\n        <p>The user interface allows operators to</p>\n        <ul>\n          <li>Access guidance on how to handle a specific alarm</li>\n          <li>\n            Invoke links to related operator interfaces or other CSS tools for\n            the alarm trigger PVs\n          </li>\n          <li>Acknowledge alarms and edit the configuration</li>\n        </ul>\n        <Img\n          fluid={images.beast.childImageSharp.fluid}\n          style={{ maxWidth: 437 }}\n        />\n        <p>\n          See also: ICALEPCS 2009 presentation{\" \"}\n          <a href=\"http://icalepcs2009.spring8.or.jp/abstract/pdf/TUA001_TALK.PDF\">\n            http://icalepcs2009.spring8.or.jp/abstract/pdf/TUA001_TALK.PDF\n          </a>\n        </p>\n        <p>\n          <a href=\"https://github.com/ControlSystemStudio/cs-studio/wiki/BEAST\">\n            Read more\n          </a>\n        </p>\n        <div style={{ marginBottom: `3rem` }}></div>\n        <h2>BOY - Best OPI, Yet</h2>\n        <p>\n          CSS BOY is an Operator Interface (OPI) development and runtime\n          environment. An OPI is a general GUI but with extra facilities to\n          connect to your live data directly.\n        </p>\n        <p>\n          CSS BOY allows building your GUI with drag and drop and connecting to\n          your data instantly. It also allows using JavaScript or Jython to\n          manipulate the GUI in a very similar way as using JavaScript in HTML.\n        </p>\n        <p>\n          In BOY, the OPI Editor is a WYSIWYG (What You See Is What You Get)\n          editor which allows you to create your GUI in a similar way of\n          creating PPT. The OPI Runtime works in a similar way as modern web\n          browsers. One can display the OPIs either in tabs, windows or views\n          and navigate OPIs forward or backward. An OPI is a regular XML file\n          that can be edited in OPI editor or a text editor and run in OPI\n          Runtime. No compilation is needed.\n        </p>\n        <p>\n          The data communication layer is a separate layer which allows BOY\n          to connect to various data sources seamlessly. Users can provide their\n          own data source by extending an Eclipse extension point. Currently, it\n          supports EPICS, local, simulated and system data sources. Potentially,\n          it could support OPC, DDS, Tango or your own data source.\n        </p>\n        <p>\n          BOY is a set of Eclipse plugins written in Java, which means it can be\n          integrated in any Eclipse RCP application. It has been tested that BOY\n          runs well on Windows, Unix and X OS platforms.\n        </p>\n        <p>\n          <a href=\"https://github.com/ControlSystemStudio/cs-studio/wiki/BOY\">\n            Read more\n          </a>\n        </p>\n        <div style={{ marginBottom: `3rem` }}></div>\n        <h2>Scan Client</h2>\n        <p>\n          The scan system can automate experiments. For example, it can move a\n          motor from some start position to an end position in certain steps,\n          waiting at each step until experiment data has been taken. A scan can\n          consist of several nested loops. For example, at each step of moving\n          the \"horizontal\" position of a sample, an inner loop can vary the\n          \"vertical\" position of the sample to perform a 2-dimensional scan of\n          the sample surface. As another example, an outer loop may vary the\n          sample temperature while inner loops vary the sample position.\n        </p>\n        <p>\n          <a href=\"http://htmlpreview.github.io/?https://github.com/ControlSystemStudio/cs-studio/blob/master/applications/scan/scan-plugins/org.csstudio.scan.ui/doc/scansystem.html\">\n            Read more\n          </a>\n        </p>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default About\n"],"sourceRoot":""}